// gfg

// Input:
// N = 2
// valueN[] = {4,5}
// M = 3
// valueM[] = {3,4,5}
// Output: 3 9 0  
// Explanation: For the given two linked
// list (4 5) and (3 4 5), after adding
// the two linked list resultant linked
// list will be (3 9 0).

// link=https://practice.geeksforgeeks.org/problems/add-two-numbers-represented-by-linked-lists/1


// class Solution
// {
//     public:
//     struct Node* reverse(struct Node* head)
//     {
//         Node* curr=head;
//         Node* prev=NULL;
//         Node* next=NULL;
        
//         while(curr!=NULL)
//         {
//             next=curr->next;
//             curr->next=prev;
//             prev=curr;
//             curr=next;
//         }
//         return prev;
//     }
//     void insertAtTail(struct Node* &head,struct Node* &tail,int val)
//     {
//         Node* temp=new Node(val);
//         if(head==NULL)  {
//             head=temp;
//             tail=temp;
//             return;
//         }
//         else{
//             tail->next=temp;
//             tail=temp;
//         }
//     }
//     struct Node* add(struct Node* first,struct Node* second)
//     {
//           int carry=0;
//           Node* ansHead=NULL;
//           Node* ansTail=NULL;
//           while(first!=NULL ||  second != NULL || carry!=NULL){
//               int val1=0;
//               if(first!=NULL){
//                   val1=first->data;
//               }
//               int val2=0;
//               if(second!=NULL){
//                   val2=second->data;
//               }
//               int sum=carry+val1+val2;
//               int digit=sum%10;
              
//               insertAtTail(ansHead,ansTail,digit);
//               carry=sum/10;
//               if(first!=NULL)first=first->next;
              
//               if(second!=NULL)second=second->next;
              
//           }
         
//           return ansHead;
//     }
//     //Function to add two numbers represented by linked list.
//     struct Node* addTwoLists(struct Node* first, struct Node* second)
//     {
//         // code here
//         // reverse LL
//         first=reverse(first);
//         second=reverse(second);
        
//         Node* ans=add(first,second);
        
//         ans=reverse(ans);
//         return ans;
//     }
// };


// //{ Driver Code Starts.

// int main()
// {
//     int t;
//     cin>>t;
//     while(t--)
//     {
//         int n, m;
        
//         cin>>n;
//         Node* first = buildList(n);
        
//         cin>>m;
//         Node* second = buildList(m);
//         Solution ob;
//         Node* res = ob.addTwoLists(first,second);
//         printList(res);
//     }
//     return 0;
// }

// // } Driver Code Ends